x1<-c(-1,-.3,1.2,.4,0,.5,0,0,0,0,0,0,-1,.3,-1.2,-.4)
factor.wge(phi=x1)
x1<-c(1,-.3,1.2,.4,0,.5,0,0,0,0,0,0,-1,.3,-1.2,-.4)
factor.wge(phi=x1)
x<-c(1,-.5,.2,0,-1,.5,-.2)
factor.wge(phi=x)
factor(c(0,0,0,1))
factor.wge(c(0,0,0,1))
x<-c(-.5,.2,0,-1,.5,-.2)
factor.wge(phi=x)
x1<-c(1,-.3,1.2,.4,0,.5,0,0,0,0,0,0,-1,.3,-1.2,-.4)
factor.wge(phi=x1)
factor.wge(phi=c(rep(0,5),1))
factor.wge(phi=c(rep(0,11),1))
factor.wge(phi=x1)
?sample
sample(3,2)
sample(10,5)
?floor
floor(5)
floor(6)
floor(6.7)
floor(6.9)
ceiling(6.7)
ceiling(6.1)
x<-c(1:10)
x
sample(x,5)
x1<-sample(x,5)
x1
x-x1
x %in% x1
x[x %in% x1]
x[!(x %in% x1)]
x1
test = list()
test[1] = c(1,2)
test[1] <- c(1,2)
test[1] <- list()
test[1] <- list(5)
test[1]
x
x1 <- c(c(1,3), c(4,6), c(9))
x1
x1 <- c(list(c(1,3)), c(4,6), c(9))
x1
x1 <- c(list(c(1,3)), list(c(4,6)), list(c(9)))
x1
x
x[!(x %in% x1)]
x[!(x %in% x1[[1]])]
x[!(x %in% x1[[1:3]])]
x2 <- x1
x2
?unpack
x2 <- lapply(x1, function(x) x)
x2
x2 <- lapply(x1, function(x) c(x))
x2
x[!(x %in% lapply(x1, function(x) x))]
x2 <- lapply(x1, function(x) for (i in 1:length(x)) {c(x[[i]])})
x2
lapply(x1, function(x) for (i in 1:length(x)) {c(x[[i]])})
x1
for (value in x1){value}
for (value in x1){return(value)}
for (value in x1){print(value)}
x2 <- (for (value in x1){(value)})
x2
x2 <- (for (value in x1){return(value)})
x2
x2 <- (for (value in x1){print(value)})
x2
for (value in x1){x2 <- c(value)}
x2
for (value in x1){x2.append(value)}
?append
unlist(x1)
x[!(x %in% unlist(x1)]
x[!(x %in% unlist(x1))]
x3 <- list()
unlist(x3)
x[!(x %in% unlist(x3))]
x=10
x[!(x %in% unlist(x3))]
1:x[!(x %in% unlist(x3))]
1:x[!(x %in% unlist(x1))]
x1
(1:x)[!(x %in% unlist(x1))]
(1:x)[!(1:x %in% unlist(x1))]
x[!(1:x %in% unlist(x1))]
1:x[!(1:x %in% unlist(x1))]
(1:x)[!(1:x %in% unlist(x1))]
(1:x)[!(1:x %in% unlist(x3))]
library(tswge)
gen.aruma.wge(n=500, phi=0, theta=0, s=7, sn=100)
gen.aruma.wge(n=500, phi=0, theta=0, s=7, sn=2019)
library(readr)
AGNC <- read_csv("C:/Users/anhai/Desktop/SMU/6373_Time_Series/6/AGNC.csv")
View(AGNC)
plotts.sample.wge(AGNC$Close)
AGNC_diff <- artrans.wge(AGNC$Close, 1)
plotts.sample.wge(AGNC_diff)
?atrans.wge
?artrans.wge
artrans.wge(AGNC$Close, 1)
?plotts.sample.wge
?artrans.wge
aic5.wge(AGNC$Close)
aic5.wge(AGNC_diff)
aic5.wge(AGNC_diff, q=0:4)
aic5.wge(AGNC_diff, p=0:6)
library(rpart)
data("iris")
iris
?rpart.plot
library(rpart.plot)
?rpart
data("iris")
install.packages("rpart.plot")
library(rpart.plot)
?rpart.plot
rpart.plot(iris)
head(iris)
iris_ <- rpart(iris$Species ~ ., iris)
rpart.plot(iris_)
?rpart.plot
?rpart
?rpart.control
iris_ <- rpart(iris$Species ~ ., iris, control = rpart.control(cp = 0.05))
rpart.plot(iris_)
plotcp(iris_)
iris_ <- rpart(iris$Species ~ ., iris
)
plotcp(iris_)
iris_cp <- rpart(iris$Species ~ ., iris, control = rpart.control(cp = 0.066))
plotcp(iris_cp)
rpart.plot(iris_cp)
rpart.plot(iris_)
iris_cp_0.1 <- rpart(iris$Species ~ ., iris, control = rpart.control(cp = 0.1))
rpart.plot(iris_cp_0.1)
iris_cp_1 <- rpart(iris$Species ~ ., iris, control = rpart.control(cp = 1))
rpart.plot(iris_cp_1)
iris_cp_0.4 <- rpart(iris$Species ~ ., iris, control = rpart.control(cp = .4))
rpart.plot(iris_cp_0.4)
library(tswge)
?gen.sigplusnoise.wge
gen.sigplusnoise.wge(n=100,coef=c(3,1),freq=c(.1,.4),psi=c(0,0),vara=2)
gen.sigplusnoise.wge(n=100,coef=c(3,1),freq=c(.1,.4),psi=c(0,0),vara=2)
gen.sigplusnoise.wge(n=100,coef=c(3,1),freq=c(.1,.4),psi=c(0,0),vara=2)
setwd("C:/Users/anhai/Desktop/SMU/7333_QTW/7333_QTW/Case_Study_6")
spamPath = "./SpamAssassinMessages/"
dirNames = list.files(path = paste(spamPath, "messages",  sep = .Platform$file.sep))
fullDirNames = paste(spamPath, "messages", dirNames, sep = .Platform$file.sep)
splitMessage = function(msg) {
splitPoint = match("", msg)
header = msg[1:(splitPoint-1)]
body = msg[ -(1:splitPoint) ]
return(list(header = header, body = body))
}
getBoundary = function(header) {
boundaryIdx = grep("boundary=", header)
boundary = gsub('"', "", header[boundaryIdx])
gsub(".*boundary= *([^;]*);?.*", "\\1", boundary)
}
dropAttach = function(body, boundary){
bString = paste("--", boundary, sep = "")
bStringLocs = which(bString == body)
if (length(bStringLocs) <= 1) return(body)
eString = paste("--", boundary, "--", sep = "")
eStringLoc = which(eString == body)
if (length(eStringLoc) == 0)
return(body[ (bStringLocs[1] + 1) : (bStringLocs[2] - 1)])
n = length(body)
if (eStringLoc < n)
return( body[ c( (bStringLocs[1] + 1) : (bStringLocs[2] - 1),
( (eStringLoc + 1) : n )) ] )
return( body[ (bStringLocs[1] + 1) : (bStringLocs[2] - 1) ])
}
library(tm)
stopWords = stopwords()
cleanSW = tolower(gsub("[[:punct:]0-9[:blank:]]+", " ", stopWords))
SWords = unlist(strsplit(cleanSW, "[[:blank:]]+"))
SWords = SWords[ nchar(SWords) > 1 ]
stopWords = unique(SWords)
cleanText =
function(msg)   {
tolower(gsub("[[:punct:]0-9[:space:][:blank:]]+", " ", msg))
}
findMsgWords =
function(msg, stopWords) {
if(is.null(msg))
return(character())
words = unique(unlist(strsplit(cleanText(msg), "[[:blank:]\t]+")))
# drop empty and 1 letter words
words = words[ nchar(words) > 1]
words = words[ !( words %in% stopWords) ]
invisible(words)
}
processAllWords = function(dirName, stopWords)
{
# read all files in the directory
fileNames = list.files(dirName, full.names = TRUE)
# drop files that are not email, i.e., cmds
notEmail = grep("cmds$", fileNames)
if ( length(notEmail) > 0) fileNames = fileNames[ - notEmail ]
messages = lapply(fileNames, readLines, encoding = "latin1")
# split header and body
emailSplit = lapply(messages, splitMessage)
# put body and header in own lists
bodyList = lapply(emailSplit, function(msg) msg$body)
headerList = lapply(emailSplit, function(msg) msg$header)
rm(emailSplit)
# determine which messages have attachments
hasAttach = sapply(headerList, function(header) {
CTloc = grep("Content-Type", header)
if (length(CTloc) == 0) return(0)
multi = grep("multi", tolower(header[CTloc]))
if (length(multi) == 0) return(0)
multi
})
hasAttach = which(hasAttach > 0)
# find boundary strings for messages with attachments
boundaries = sapply(headerList[hasAttach], getBoundary)
# drop attachments from message body
bodyList[hasAttach] = mapply(dropAttach, bodyList[hasAttach],
boundaries, SIMPLIFY = FALSE)
# extract words from body
msgWordsList = lapply(bodyList, findMsgWords, stopWords)
invisible(msgWordsList)
}
msgWordsList = lapply(fullDirNames, processAllWords,
stopWords = stopWords)
numMsgs = sapply(msgWordsList, length)
numMsgs
isSpam = rep(c(FALSE, FALSE, FALSE, TRUE, TRUE), numMsgs)
msgWordsList = unlist(msgWordsList, recursive = FALSE)
numEmail = length(isSpam)
numSpam = sum(isSpam)
numHam = numEmail - numSpam
set.seed(418910)
#number of folds to produce
fold = 5
#initialize lists of indexes
foldSpamIdx = list()
foldHamIdx = list()
#create a list of x folds holding a list of indexes
#sample() will not sample indexes that have already been taken for previous folds
for (x in 1:fold){
foldSpamIdx[x] = list(sample((1:numSpam)[!((1:numSpam) %in% unlist(foldSpamIdx))], size = floor(numSpam/fold)))
foldHamIdx[x] = list(sample((1:numHam)[!((1:numHam) %in% unlist(foldHamIdx))], size = floor(numHam/fold)))
}
computeFreqs =
function(wordsList, spam, bow = unique(unlist(wordsList)))
{
# create a matrix for spam, ham, and log odds
wordTable = matrix(0.5, nrow = 4, ncol = length(bow),
dimnames = list(c("spam", "ham",
"presentLogOdds",
"absentLogOdds"),  bow))
# For each spam message, add 1 to counts for words in message
counts.spam = table(unlist(lapply(wordsList[spam], unique)))
wordTable["spam", names(counts.spam)] = counts.spam + .5
# Similarly for ham messages
counts.ham = table(unlist(lapply(wordsList[!spam], unique)))
wordTable["ham", names(counts.ham)] = counts.ham + .5
# Find the total number of spam and ham
numSpam = sum(spam)
numHam = length(spam) - numSpam
# Prob(word|spam) and Prob(word | ham)
wordTable["spam", ] = wordTable["spam", ]/(numSpam + .5)
wordTable["ham", ] = wordTable["ham", ]/(numHam + .5)
# log odds
wordTable["presentLogOdds", ] =
log(wordTable["spam",]) - log(wordTable["ham", ])
wordTable["absentLogOdds", ] =
log((1 - wordTable["spam", ])) - log((1 -wordTable["ham", ]))
invisible(wordTable)
}
#create a list of word table, 1 for each fold as the test set
trainTable = list()
testMsgWords = list()
testIsSpam = list()
trainIsSpam = list()
for (x in 1:fold){
testSpamIdx = foldSpamIdx[[x]]
testHamIdx = foldHamIdx[[x]]
testMsgWords[[x]] = c((msgWordsList[isSpam])[testSpamIdx],
(msgWordsList[!isSpam])[testHamIdx] )
trainMsgWords = c((msgWordsList[isSpam])[ - testSpamIdx],
(msgWordsList[!isSpam])[ - testHamIdx])
testIsSpam[[x]] = rep(c(TRUE, FALSE),
c(length(testSpamIdx), length(testHamIdx)))
trainIsSpam[[x]] = rep(c(TRUE, FALSE),
c(numSpam - length(testSpamIdx),
numHam - length(testHamIdx)))
trainTable[[x]] = list(computeFreqs(trainMsgWords, trainIsSpam[[x]]))
}
computeMsgLLR = function(words, freqTable)
{
# Discards words not in training data.
words = words[!is.na(match(words, colnames(freqTable)))]
# Find which words are present
present = colnames(freqTable) %in% words
sum(freqTable["presentLogOdds", present]) +
sum(freqTable["absentLogOdds", !present])
}
computeMsgLLR = function(words, freqTable)
{
# Discards words not in training data.
words = words[!is.na(match(words, colnames(freqTable)))]
print(head(words))
# Find which words are present
present = colnames(freqTable) %in% words
sum(freqTable["presentLogOdds", present]) +
sum(freqTable["absentLogOdds", !present])
}
testLLR = sapply(testMsgWords[[1]], computeMsgLLR, trainTable[[1]][[1]])
tapply(testLLR, testIsSpam[[1]], summary)
testLLR = list()
for (x in 1:1){
testLLR[[x]] = sapply(testMsgWords[[x]], computeMsgLLR, trainTable[[x]][[1]])
print(paste("Fold ", x, ":", sep=""))
print(tapply(testLLR[[x]], testIsSpam[[x]], summary))
}
computeMsgLLR = function(words, freqTable)
{
# Discards words not in training data.
words = words[!is.na(match(words, colnames(freqTable)))]
# Find which words are present
present = colnames(freqTable) %in% words
sum(freqTable["presentLogOdds", present]) +
sum(freqTable["absentLogOdds", !present])
}
testLLR = list()
for (x in 1:1){
testLLR[[x]] = sapply(testMsgWords[[x]], computeMsgLLR, trainTable[[x]][[1]])
print(paste("Fold ", x, ":", sep=""))
print(tapply(testLLR[[x]], testIsSpam[[x]], summary))
}
testLLR = sapply(testMsgWords[[1]], computeMsgLLR, trainTable[[1]][[1]])
tapply(testLLR, testIsSpam[[1]], summary)
testLLR = list()
for (x in 1:5){
testLLR[[x]] = sapply(testMsgWords[[x]], computeMsgLLR, trainTable[[x]][[1]])
print(paste("Fold ", x, ":", sep=""))
print(tapply(testLLR[[x]], testIsSpam[[x]], summary))
}
spamLab = c("ham", "spam")[1 + testIsSpam[[1]]]
boxplot(testLLR[[1]] ~ spamLab, ylab = "Log Likelihood Ratio",
main = "Log Likelihood Ratio for Randomly Chosen Test Messages",
ylim=c(-500, 500))
spamLab = c("ham", "spam")[1 + testIsSpam[[1]]]
boxplot(testLLR[[2]] ~ spamLab, ylab = "Log Likelihood Ratio",
main = "Log Likelyhood Ratio for Randomly Chosen Test Messages",
ylim=c(-500, 500))
spamLab = c("ham", "spam")[1 + testIsSpam[[2]]]
boxplot(testLLR[[2]] ~ spamLab, ylab = "Log Likelihood Ratio",
main = "Log Likelyhood Ratio for Randomly Chosen Test Messages",
ylim=c(-500, 500))
for (x in 1:fold){
spamLab = c("ham", "spam")[1 + testIsSpam[[x]]]
boxplot(testLLR[[x]] ~ spamLab, ylab = "Log Likelihood Ratio",
main = "Log Likelihood Ratio for Randomly Chosen Test Messages",
ylim=c(-500, 500))
}
typeIErrorRates =
function(llrVals, isSpam)
{
o = order(llrVals)
llrVals =  llrVals[o]
isSpam = isSpam[o]
idx = which(!isSpam)
N = length(idx)
list(error = (N:1)/N, values = llrVals[idx])
}
xI = typeIErrorRates(testLLR[[1]], testIsSpam[[1]])
#xII = typeIIErrorRates(testLLR, testIsSpam)
tau01 = round(min(xI$values[xI$error <= 0.01]))
#t2 = max(xII$error[ xII$values < tau01 ])
library(RColorBrewer)
#cols = brewer.pal(9, "Set1")[c(3, 4, 5)]
plot(xI$error ~ xI$values,  type = "l", col = cols[1], lwd = 3,
xlim = c(-300, 250), ylim = c(0, 1),
xlab = "Log Likelihood Ratio Values", ylab="Error Rate")
#points(xI$error ~ xI$values, type = "l", col = cols[2], lwd = 3)
#legend(x = 50, y = 0.4, fill = c(cols[2], cols[1]),
#       legend = c("Classify Ham as Spam",
#                  "Classify Spam as Ham"), cex = 0.8,
#       bty = "n")
#abline(h=0.01, col ="grey", lwd = 3, lty = 2)
#text(-250, 0.05, pos = 4, "Type I Error = 0.01", col = cols[2])
#mtext(tau01, side = 1, line = 0.5, at = tau01, col = cols[3])
#segments(x0 = tau01, y0 = -.50, x1 = tau01, y1 = t2,
#         lwd = 2, col = "grey")
#text(tau01 + 20, 0.05, pos = 4,
#     paste("Type II Error = ", round(t2, digits = 2)),
#     col = cols[1])
#dev.off()
cols = brewer.pal(9, "Set1")[c(3, 4, 5)]
plot(xI$error ~ xI$values,  type = "l", col = cols[1], lwd = 3,
xlim = c(-300, 250), ylim = c(0, 1),
xlab = "Log Likelihood Ratio Values", ylab="Error Rate")
cols = brewer.pal(9, "Set1")[c(3, 4, 5)]
plot(xI$error ~ xI$values,  type = "l", col = cols[1], lwd = 3,
xlim = c(-300, 250), ylim = c(0, 1),
xlab = "Log Likelihood Ratio Values", ylab="Error Rate")
points(xI$error ~ xI$values, type = "l", col = cols[2], lwd = 3)
cols = brewer.pal(9, "Set1")[c(3, 4, 5)]
plot(xI$error ~ xI$values,  type = "l", col = cols[1], lwd = 3,
xlim = c(-300, 250), ylim = c(0, 1),
xlab = "Log Likelihood Ratio Values", ylab="Error Rate")
points(xI$error ~ xI$values, type = "l", col = cols[2], lwd = 3)
#legend(x = 50, y = 0.4, fill = c(cols[2], cols[1]),
#       legend = c("Classify Ham as Spam",
#                  "Classify Spam as Ham"), cex = 0.8,
#       bty = "n")
abline(h=0.01, col ="grey", lwd = 3, lty = 2)
text(-250, 0.05, pos = 4, "Type I Error = 0.01", col = cols[2])
cols = brewer.pal(9, "Set1")[c(3, 4, 5)]
plot(xI$error ~ xI$values,  type = "l", col = cols[1], lwd = 3,
xlim = c(-300, 250), ylim = c(0, 1),
xlab = "Log Likelihood Ratio Values", ylab="Error Rate")
points(xI$error ~ xI$values, type = "l", col = cols[2], lwd = 3)
#legend(x = 50, y = 0.4, fill = c(cols[2], cols[1]),
#       legend = c("Classify Ham as Spam",
#                  "Classify Spam as Ham"), cex = 0.8,
#       bty = "n")
abline(h=0.01, col ="grey", lwd = 3, lty = 2)
text(-250, 0.05, pos = 4, "Type I Error = 0.01", col = cols[2])
mtext(tau01, side = 1, line = 0.5, at = tau01, col = cols[3])
cols = brewer.pal(9, "Set1")[c(3, 4, 5)]
plot(xI$error ~ xI$values,  type = "l", col = cols[1], lwd = 3,
xlim = c(-300, 250), ylim = c(0, 1),
xlab = "Log Likelihood Ratio Values", ylab="Error Rate")
points(xI$error ~ xI$values, type = "l", col = cols[2], lwd = 3)
#legend(x = 50, y = 0.4, fill = c(cols[2], cols[1]),
#       legend = c("Classify Ham as Spam",
#                  "Classify Spam as Ham"), cex = 0.8,
#       bty = "n")
abline(h=0.01, col ="grey", lwd = 3, lty = 2)
text(-250, 0.05, pos = 4, "Type I Error = 0.01", col = cols[2])
mtext(tau01, side = 1, line = 0.5, at = tau01, col = cols[3])
segments(x0 = tau01, y0 = -.50, x1 = tau01, y1 = t2,
lwd = 2, col = "grey")
cols = brewer.pal(9, "Set1")[c(3, 4, 5)]
plot(xI$error ~ xI$values,  type = "l", col = cols[1], lwd = 3,
xlim = c(-300, 250), ylim = c(0, 1),
xlab = "Log Likelihood Ratio Values", ylab="Error Rate")
points(xI$error ~ xI$values, type = "l", col = cols[2], lwd = 3)
#legend(x = 50, y = 0.4, fill = c(cols[2], cols[1]),
#       legend = c("Classify Ham as Spam",
#                  "Classify Spam as Ham"), cex = 0.8,
#       bty = "n")
abline(h=0.01, col ="grey", lwd = 3, lty = 2)
text(-250, 0.05, pos = 4, "Type I Error = 0.01", col = cols[2])
mtext(tau01, side = 1, line = 0.5, at = tau01, col = cols[3])
segments(x0 = tau01, y0 = -.50, x1 = tau01, y1 = t2,
lwd = 2, col = "grey")
text(tau01 + 20, 0.05, pos = 4,
paste("Type II Error = ", round(t2, digits = 2)),
col = cols[1])
cols = brewer.pal(9, "Set1")[c(3, 4, 5)]
plot(xI$error ~ xI$values,  type = "l", col = cols[1], lwd = 3,
xlim = c(-300, 250), ylim = c(0, 1),
xlab = "Log Likelihood Ratio Values", ylab="Error Rate")
points(xI$error ~ xI$values, type = "l", col = cols[2], lwd = 3)
#legend(x = 50, y = 0.4, fill = c(cols[2], cols[1]),
#       legend = c("Classify Ham as Spam",
#                  "Classify Spam as Ham"), cex = 0.8,
#       bty = "n")
abline(h=0.01, col ="grey", lwd = 3, lty = 2)
text(-250, 0.05, pos = 4, "Type I Error = 0.01", col = cols[2])
mtext(tau01, side = 1, line = 0.5, at = tau01, col = cols[3])
segments(x0 = tau01, y0 = -.50, x1 = tau01, y1 = t2,
lwd = 2, col = "grey")
text(tau01 + 20, 0.05, pos = 4,
col = cols[1])
cols = brewer.pal(9, "Set1")[c(3, 4, 5)]
plot(xI$error ~ xI$values,  type = "l", col = cols[1], lwd = 3,
xlim = c(-300, 250), ylim = c(0, 1),
xlab = "Log Likelihood Ratio Values", ylab="Error Rate")
points(xI$error ~ xI$values, type = "l", col = cols[2], lwd = 3)
#legend(x = 50, y = 0.4, fill = c(cols[2], cols[1]),
#       legend = c("Classify Ham as Spam",
#                  "Classify Spam as Ham"), cex = 0.8,
#       bty = "n")
abline(h=0.01, col ="grey", lwd = 3, lty = 2)
text(-250, 0.05, pos = 4, "Type I Error = 0.01", col = cols[2])
mtext(tau01, side = 1, line = 0.5, at = tau01, col = cols[3])
segments(x0 = tau01, y0 = -.50, x1 = tau01, y1 = t2,
lwd = 2, col = "grey")
cols = brewer.pal(9, "Set1")[c(3, 4, 5)]
plot(xI$error ~ xI$values,  type = "l", col = cols[1], lwd = 3,
xlim = c(-300, 250), ylim = c(0, 1),
xlab = "Log Likelihood Ratio Values", ylab="Error Rate")
points(xI$error ~ xI$values, type = "l", col = cols[2], lwd = 3)
abline(h=0.01, col ="grey", lwd = 3, lty = 2)
text(-250, 0.05, pos = 4, "Type I Error = 0.01", col = cols[2])
mtext(tau01, side = 1, line = 0.5, at = tau01, col = cols[3])
segments(x0 = tau01, y0 = -.50, x1 = tau01, y1 = t2,
lwd = 2, col = "grey")
cols = brewer.pal(9, "Set1")[c(3, 4, 5)]
plot(xI$error ~ xI$values,  type = "l", col = cols[1], lwd = 3,
xlim = c(-300, 250), ylim = c(0, 1),
xlab = "Log Likelihood Ratio Values", ylab="Error Rate")
points(xI$error ~ xI$values, type = "l", col = cols[2], lwd = 3)
abline(h=0.01, col ="grey", lwd = 3, lty = 2)
text(-250, 0.05, pos = 4, "Type I Error = 0.01", col = cols[2])
mtext(tau01, side = 1, line = 0.5, at = tau01, col = cols[3])
segments(x0 = tau01, y0 = -.50, x1 = tau01,
lwd = 2, col = "grey")
